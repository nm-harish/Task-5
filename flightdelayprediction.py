# -*- coding: utf-8 -*-
"""FlightDelayPrediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e3vgo6NR-nLN_EoXEauWKIuDOSBokISs
"""

import sys 
import numpy
import pandas as pd
import numpy as np

dataset = pd.read_csv("flightdata(1).csv")

dataset.head()

dataset.isnull().any()

dataset.head()

dataset.columns

dataset.CANCELLED.value_counts()

dataset.isnull().any()

dataset.isnull().sum()

dataset['DEST'].unique()

dataset = dataset.drop('Unnamed: 25', axis=1)
dataset.isnull().sum()

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
# %matplotlib inline

flight_data = pd.read_csv('flightdata(1).csv')
flight_data.describe()

sns.scatterplot(x='ARR_DELAY', y='ARR_DEL15', data=flight_data)

sns.catplot(x='ARR_DEL15', y='ARR_DELAY', kind='bar', data=flight_data)

sns.heatmap(dataset.corr())

dataset = dataset[["FL_NUM", "MONTH", "DAY_OF_MONTH", "DAY_OF_WEEK", "ORIGIN", "DEST", "CRS_ARR_TIME", "DEP_DEL15", "ARR_DEL15"]]
dataset.isnull().sum()

dataset[dataset.isnull().any(axis=1)].head(10)

dataset['DEP_DEL15'].mode()

dataset = dataset.fillna({'ARR_DEL15': 1})
dataset = dataset.fillna({'DEP_DEL15': 0})
dataset.iloc[177:185]

import math

for index, row in dataset.iterrows():
  dataset.loc[index, 'CRS_ARR_TIME'] = math.floor(row['CRS_ARR_TIME']/100)
dataset.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
dataset['DEST'] = le.fit_transform(dataset['DEST'])
dataset['ORIGIN'] = le.fit_transform(dataset['ORIGIN'])

dataset.head(5)

dataset['ORIGIN'].unique()

dataset = pd.get_dummies(dataset, columns={'ORIGIN', 'DEST'})
dataset.head()

dataset.iloc[:, 8:9]

x = dataset.iloc[:, 0:8].values
y = dataset.iloc[:, 8:9].values

y

x

x.shape

y.shape

from sklearn.preprocessing import OneHotEncoder
oh = OneHotEncoder()
z=oh.fit_transform(x[:,4:5]).toarray()
t=oh.fit_transform(x[:,5:6]).toarray()

z

t

x = np.delete(x,[4,5],axis=1)

x.shape

x=np.concatenate((t,z,x),axis = 1)

x.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(dataset.drop('ARR_DEL15', axis=1), df['ARR_DEL15'], test_size=0.2, random_state=0)

x_test.shape

x_train.shape

y_test.shape

y_train.shape

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(random_state=0)
classifier.fit(x_train,y_train)

decisiontree = classifier.predict(x_test)

decisiontree

from sklearn.metrics import accuracy_score
desacc = accuracy_score(y_test,decisiontree)

desacc

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, decisiontree)

cm

import sklearn.metrics as metrics
fpr1, tpr1, threshold1 = metrics.roc_curve(y_test, decisiontree)
roc_auc1 = metrics.auc(fpr1,tpr1)

fpr1

tpr1

threshold1

import matplotlib.pyplot as plt
plt.title("roc")
plt.plot(fpr1,tpr1,'b',label = 'Auc = %0.2f'% roc_auc1)
plt.legend(loc = 'lower right')
plt.plot([0,1],[0,1], 'r--')
plt.xlim([0,1])
plt.ylim([0,1])
plt.xlabel('tpr')
plt.ylabel('fpr')
plt.show()

import pickle
pickle.dump(classifier,open('flight.pk1','wb'))